trigger:
  branches:
    include:
    - main
    - dev

resources:
- repo: self

variables:
  dockerRegistryServiceConnection: 'acrxo'
  imageRepository: 'xo-helloworld'
  containerRegistry: 'acrxo.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'acrxo-auth'
  vmImageName: 'ubuntu-latest'
  
stages:
- stage: Build
  displayName: Build stage
  jobs:  
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: InstallSSHKey@0
      displayName: 'Install an SSH key'
      inputs:
        knownHostsEntry: 'ssh.dev.azure.com ssh-rsa <public_key>'
        sshPublicKey: 'ssh-rsa <public_key>'
        sshKeySecureFile: 'id_rsa'
    - task: CmdLine@2
      inputs:
        script: 'git config --global url."git@ssh.dev.azure.com:v3".insteadOf "https://dev.azure.com"' 
    - task: CmdLine@2
      inputs:
        script: 'CGO_ENABLED=0 go build -o xo-helloworld-server ./cmd/xo-helloworld-server/main.go' 
    - task: CmdLine@2
      inputs:
        script: 'CGO_ENABLED=0 go build -o xo-helloworld-rest ./cmd/xo-helloworld-rest/main.go' 
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: buildAndPush
        repository: $(imageRepository)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - upload: manifests
      artifact: manifests
- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build
  jobs:
  - deployment: Deploy
    condition: and(succeeded(), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'xo-dev.default'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)
          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
                $(Pipeline.Workspace)/manifests/ingress.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)